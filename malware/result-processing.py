import os
import pandas as pd
import re

def process_trial(file_path):
    # Initialize variables to store trial information
    seed = None
    attempts = None
    cm_no_exist = None
    cm_exist = None
    mi_accuracy = None
    mi_running_time = None
    nm_accuracy = None
    nm_running_time = None
    ac_example_cleaned = None
    ac_running_time = None
    ac_score = None

    with open(file_path, 'r') as file:
        lines = file.readlines()

        # Extract seed and attempts from the first two lines
        seed = lines[0].split()[-1]
        attempts = lines[1].split()[-1]

        # Extract other metrics from the remaining lines
        for line in lines[2:]:
            if 'CM no exist' in line:
                cm_no_exist = line.split()[-1]
            elif 'CM exist' in line:
                cm_exist = line.split()[-1]
            elif 'MI Accuracy' in line:
                mi_accuracy = float(line.split()[-1])
            elif 'MI running time' in line:
                mi_running_time = float(line.split()[-1])
            elif 'NM Accuracy' in line:
                nm_accuracy = float(line.split()[-1])
            elif 'NM running time' in line:
                nm_running_time = float(line.split()[-1])
            elif 'AC example cleaned' in line:
                ac_example_cleaned = float(line.split()[-1])
            elif 'AC running time' in line:
                ac_running_time = float(line.split()[-1])
            elif 'AC score' in line:
                ac_score = float(line.split()[-1])

    # Create a dictionary with the extracted information
    data = {
        'Seed': seed,
        'Attempts': attempts,
        'CM no exist': cm_no_exist,
        'CM exist': cm_exist,
        'MI Accuracy': mi_accuracy,
        'MI running time': mi_running_time,
        'NM Accuracy': nm_accuracy,
        'NM running time': nm_running_time,
        'AC example cleaned': ac_example_cleaned,
        'AC running time': ac_running_time,
        'AC score': ac_score
    }

    df = pd.DataFrame([data])  # Create a DataFrame with a single row (one trial)
    return df

def process_all_trials(directory_path):
    dfs = []

    # Define a regex pattern to extract missing factor and trial number
    pattern = r'MALWARE_(\d+\.\d+)_(\d+)\.txt'

    files = os.listdir(directory_path)
    print(files)
    for filename in files:
        file_path = os.path.join(directory_path, filename)

        # Use regex to extract missing factor and trial number
        match = re.search(pattern, filename)

        if match:
            missing_factor = float(match.group(1))
            trial_number = int(match.group(2))

            df = process_trial(file_path)

            # Add missing factor and trial number columns to the DataFrame
            df['Missing Factor'] = missing_factor
            df['Trial Number'] = trial_number

            dfs.append(df)
        else:
            print(f"No match found for filename: {filename}")

    if dfs:
        final_df = pd.concat(dfs, ignore_index=True)
        return final_df
    else:
        print("No trial files found in the specified directory.")
        return None

if __name__ == '__main__':
    # Example usage
    directory_path = 'Results/'  # Change this to the directory where your trial files are stored
    result_df = process_all_trials(directory_path)

    if result_df is not None:
        print(result_df)

    result_df.to_csv(os.path.join(directory_path, 'Combined_Results.csv'),index=False)
